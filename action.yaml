name: build-release
description: >
  Build Savi application release binaries for
  multiple platforms from a single CI runner.

inputs:
  manifest-name:
    description: >
      The name of the Savi manifest to build as a binary.
    required: true

  tarball-name:
    description: >
      The name to use for the built tarballs.
      Each tarball will have a suffix of the platform name and `.tar.gz`.
    required: true

  all-platforms:
    type: boolean
    description: >
      Produce builds for all platforms.
    required: false
    default: false

  x86_64-unknown-linux-gnu:
    type: boolean
    description: >
      Produce a build targeting the x86_64-unknown-linux-gnu platform.
    required: false
    default: false

  x86_64-unknown-linux-musl:
    type: boolean
    description: >
      Produce a build targeting the x86_64-unknown-linux-musl platform.
    required: false
    default: false

  arm64-unknown-linux-musl:
    type: boolean
    description: >
      Produce a build targeting the arm64-unknown-linux-musl platform.
    required: false
    default: false

  x86_64-unknown-freebsd:
    type: boolean
    description: >
      Produce a build targeting the x86_64-unknown-freebsd platform.
    required: false
    default: false

  x86_64-apple-macosx:
    type: boolean
    description: >
      Produce a build targeting the x86_64-apple-macosx platform.
    required: false
    default: false

  arm64-apple-macosx:
    type: boolean
    description: >
      Produce a build targeting the arm64-apple-macosx platform.
    required: false
    default: false

  x86_64-unknown-windows-msvc:
    type: boolean
    description: >
      Produce a build targeting the x86_64-unknown-windows-msvc platform.
    required: false
    default: false

  macosx-accept-license:
    type: boolean
    description: >
      Acknowledge acceptance of the terms of the MacOSX SDK license.
      Required for building macosx targets on non-macosx runners.
    required: false
    default: false

  windows-accept-license:
    type: boolean
    description: >
      Acknowledge acceptance of the terms of the Windows SDK license.
      Required for building windows targets on non-windows runners.
    required: false
    default: false

  build-command:
    description: The build command. You probably shouldn't mess with this.
    required: false
    default: " \
      echo Building $tarball_name-$target.tar.gz && \
      rm -rf bin && \
      savi build $manifest_name -X $target --release --no-debug && \
      rm -rf $dir/current && \
      cp -r bin $dir/current && \
      mkdir -p $dir/publish && \
      tar -czf $dir/publish/$tarball_name-$target.tar.gz -C $dir/current . \
    "

outputs:
  tarball-directory:
    description: The directory where the bin release tarballs were build.
    value: ${{ steps.setup.outputs.directory }}/publish

runs:
  using: "composite"
  steps:
    - id: setup
      run: echo "directory=$(mktemp -d)" >> $GITHUB_OUTPUT
      shell: bash
    - run: mkdir -p ${{ steps.setup.outputs.directory }}/publish
      shell: bash

    # Set up the x86_64 debian root, if the user requested that target.
    - if: >
        inputs.x86_64-unknown-linux-gnu == 'true'
        || inputs.all-platforms == 'true'
      id: cache-x-x86_64-linux-gnu
      uses: actions/cache@v3
      with:
        key: savi-build-release-x86_64-debian-bullseye-20220922
        path: /tmp/x-x86_64-linux-gnu/root
    - if: >
        (inputs.x86_64-unknown-linux-gnu == 'true'
          || inputs.all-platforms == 'true')
        && steps.cache-x-x86_64-linux-gnu.outputs.cache-hit != 'true'
      shell: bash
      run: |
        libc6_sha256=a3ef5dbbfa61f944efaa759feb4b3d05f572be159216545bced7b297fc09bab5 && \
        libc6_dev_sha256=6821bb405a262ab73c0d087d742ce531103b8906f3a5fc0ee25c347295edee30 && \
        libgcc_dev_sha256=347113a3bdd7379846e618efb610f49ce2704032972e1797e8e126925d5d7b19 && \
        libgcc_shared_sha256=9e1d76c3f638472f7940bfac8f42c10aa534c0a0fce2314641d41a2b492347cd && \
        rm -rf /tmp/x-x86_64-linux-gnu && mkdir -p /tmp/x-x86_64-linux-gnu/root && \
        wget http://http.us.debian.org/debian/pool/main/c/cross-toolchain-base/libc6-amd64-cross_2.31-9cross4_all.deb \
          -O /tmp/x-x86_64-linux-gnu/libc6.deb && \
        wget http://http.us.debian.org/debian/pool/main/c/cross-toolchain-base/libc6-dev-amd64-cross_2.31-9cross4_all.deb \
          -O /tmp/x-x86_64-linux-gnu/libc6-dev.deb && \
        wget http://http.us.debian.org/debian/pool/main/g/gcc-10-cross/libgcc-10-dev-amd64-cross_10.2.1-6cross1_all.deb \
          -O /tmp/x-x86_64-linux-gnu/libgcc-dev.deb && \
        wget http://http.us.debian.org/debian/pool/main/g/gcc-10-cross/libgcc-s1-amd64-cross_10.2.1-6cross1_all.deb \
          -O /tmp/x-x86_64-linux-gnu/libgcc-shared.deb && \
        echo $libc6_sha256'  /tmp/x-x86_64-linux-gnu/libc6.deb' | sha256sum -c - && \
        echo $libc6_dev_sha256'  /tmp/x-x86_64-linux-gnu/libc6-dev.deb' | sha256sum -c - && \
        echo $libgcc_dev_sha256'  /tmp/x-x86_64-linux-gnu/libgcc-dev.deb' | sha256sum -c - && \
        echo $libgcc_shared_sha256'  /tmp/x-x86_64-linux-gnu/libgcc-shared.deb' | sha256sum -c - && \
        cd /tmp/x-x86_64-linux-gnu && \
        ar -xf libc6.deb data.tar.xz && tar -xf data.tar.xz -C root && \
        ar -xf libc6-dev.deb data.tar.xz && tar -xf data.tar.xz -C root && \
        ar -xf libgcc-dev.deb data.tar.xz && tar -xf data.tar.xz -C root && \
        ar -xf libgcc-shared.deb data.tar.xz && tar -xf data.tar.xz -C root && \
        echo Fixing troublesome absolute paths in linker scripts... && \
        sed -i 's|/usr|/tmp/x-x86_64-linux-gnu/root/usr|g' \
          root/usr/x86_64-linux-gnu/lib/libc.so \
          root/usr/x86_64-linux-gnu/lib/libm.so \
          && \
        echo Done!

    # Set up the x86_64 alpine root, if the user requested that target.
    - if: >
        inputs.x86_64-unknown-linux-musl == 'true'
        || inputs.all-platforms == 'true'
      id: cache-x-x86_64-alpine
      uses: actions/cache@v3
      with:
        key: savi-build-release-x86_64-alpine-3.17-20220922
        path: /tmp/x-x86_64-alpine/root
    - if: >
        (inputs.x86_64-unknown-linux-musl == 'true'
          || inputs.all-platforms == 'true')
        && steps.cache-x-x86_64-alpine.outputs.cache-hit != 'true'
      shell: bash
      run: |
        musl_dev_sha256=4a8f5baae81869a5136db7d321fcaed2d499252c7d8da6b28fbb3e8188f38785 && \
        gcc_sha256=6727367ddd0c58203ac4e9b96a30d371e92da64c4b0f7b1b2afbd512c80a61be && \
        libgcc_sha256=8675867db77b5af11b88fd19186450333202d94cccd84a76a066dccd5b6e8cf1 && \
        rm -rf /tmp/x-x86_64-alpine && mkdir -p /tmp/x-x86_64-alpine/root && \
        wget https://dl-cdn.alpinelinux.org/alpine/v3.21/main/x86_64/musl-dev-1.2.5-r9.apk \
          -O /tmp/x-x86_64-alpine/musl-dev.apk && \
        wget https://dl-cdn.alpinelinux.org/alpine/v3.21/main/x86_64/gcc-14.2.0-r4.apk \
          -O /tmp/x-x86_64-alpine/gcc.apk && \
        wget https://dl-cdn.alpinelinux.org/alpine/v3.21/main/x86_64/libgcc-14.2.0-r4.apk \
          -O /tmp/x-x86_64-alpine/libgcc.apk && \
        echo $musl_dev_sha256'  /tmp/x-x86_64-alpine/musl-dev.apk' | sha256sum -c - && \
        echo $gcc_sha256'  /tmp/x-x86_64-alpine/gcc.apk' | sha256sum -c - && \
        echo $libgcc_sha256'  /tmp/x-x86_64-alpine/libgcc.apk' | sha256sum -c - && \
        cd /tmp/x-x86_64-alpine && \
        tar -xf musl-dev.apk -C root && \
        tar -xf gcc.apk -C root && \
        tar -xf libgcc.apk -C root && \
        echo Done!

    # Set up the arm64 alpine root, if the user requested that target.
    - if: >
        inputs.arm64-unknown-linux-musl == 'true'
        || inputs.all-platforms == 'true'
      id: cache-x-arm64-alpine
      uses: actions/cache@v3
      with:
        key: savi-build-release-arm64-alpine-3.17-20220922
        path: /tmp/x-arm64-alpine/root
    - if: >
        (inputs.arm64-unknown-linux-musl == 'true'
          || inputs.all-platforms == 'true')
        && steps.cache-x-arm64-alpine.outputs.cache-hit != 'true'
      shell: bash
      run: |
        musl_dev_sha256=c5809358ba45016a6bd160f8ec37633b5b0e60f08a776205d22a05fb59403dee && \
        gcc_sha256=f9fa19072d1f1a4f72631f3fd090a85a48b95fa08b2062630ea96813275e130f && \
        libgcc_sha256=7cfdc00f102d3b98fe563b31e7a59a7b7ab61850c1751915f34e419e83ef2653 && \
        rm -rf /tmp/x-arm64-alpine && mkdir -p /tmp/x-arm64-alpine/root && \
        wget https://dl-cdn.alpinelinux.org/alpine/v3.21/main/aarch64/musl-dev-1.2.5-r9.apk \
          -O /tmp/x-arm64-alpine/musl-dev.apk && \
        wget https://dl-cdn.alpinelinux.org/alpine/v3.21/main/aarch64/gcc-14.2.0-r4.apk \
          -O /tmp/x-arm64-alpine/gcc.apk && \
        wget https://dl-cdn.alpinelinux.org/alpine/v3.21/main/aarch64/libgcc-14.2.0-r4.apk \
          -O /tmp/x-arm64-alpine/libgcc.apk && \
        echo $musl_dev_sha256'  /tmp/x-arm64-alpine/musl-dev.apk' | sha256sum -c - && \
        echo $gcc_sha256'  /tmp/x-arm64-alpine/gcc.apk' | sha256sum -c - && \
        echo $libgcc_sha256'  /tmp/x-arm64-alpine/libgcc.apk' | sha256sum -c - && \
        cd /tmp/x-arm64-alpine && \
        tar -xf musl-dev.apk -C root && \
        tar -xf gcc.apk -C root && \
        tar -xf libgcc.apk -C root && \
        echo Done!

    # Set up the x86_64 freebsd root, if the user requested that target.
    #
    # For updates, see package names and hashes in the following YAML file:
    # http://pkg.freebsd.org/FreeBSD:13:amd64/latest/packagesite.txz
    - if: >
        inputs.x86_64-unknown-freebsd == 'true'
        || inputs.all-platforms == 'true'
      id: cache-x-x86_64-freebsd
      uses: actions/cache@v3
      with:
        key: savi-build-release-x86_64-freebsd-14-20230421
        path: /tmp/x-x86_64-freebsd/root
    - if: >
        (inputs.x86_64-unknown-freebsd == 'true'
          || inputs.all-platforms == 'true')
        && steps.cache-x-x86_64-freebsd.outputs.cache-hit != 'true'
      shell: bash
      run: |
        sysroot_sha256=def304c61f3a24ba9393cba62cb93bf8aa6404bf28a2603d4226695b1de5abcd && \
        rm -rf /tmp/x-x86_64-freebsd && mkdir -p /tmp/x-x86_64-freebsd/root && \
        cd /tmp/x-x86_64-freebsd && \
        wget http://pkg.freebsd.org/FreeBSD:14:amd64/release_0/All/amd64-freebsd-sysroot-a2023.08.03.pkg \
          -O sysroot.pkg && \
        echo $sysroot_sha256'  sysroot.pkg' | sha256sum -c - && \
        tar -xf sysroot.pkg -C root && \
        echo Fixing troublesome absolute paths in linker scripts... && \
        sed -i 's| /lib| /tmp/x-x86_64-freebsd/root/usr/local/freebsd-sysroot/amd64/lib|g' \
          root/usr/local/freebsd-sysroot/amd64/usr/lib/libc.so \
          && \
        sed -i 's| /usr| /tmp/x-x86_64-freebsd/root/usr/local/freebsd-sysroot/amd64/usr|g' \
          root/usr/local/freebsd-sysroot/amd64/usr/lib/libc.so \
          && \
        echo Done!

    # Set up the MacOSX root, if the user accepted the license.
    - if: inputs.macosx-accept-license == 'true'
      id: cache-x-macosx
      uses: actions/cache@v3
      with:
        key: savi-build-release-macosx-11.3-usr-lib-20220922
        path: /tmp/x-macosx/root/usr/lib
    - if: >
        inputs.macosx-accept-license == 'true'
        && steps.cache-x-macosx.outputs.cache-hit != 'true'
      shell: bash
      run: |
        macosx_sha512=36c1964ea43a782dfe2a0ef1da8c9c95ffe834fbc10b0d312ff8a87dd9f4c3310dea67e6e3d943824a2e3c288be4d60cf5bd852027770b35bc088527b598734f && \
        rm -rf /tmp/x-macosx && mkdir -p /tmp/x-macosx/root && \
        wget https://storage.googleapis.com/ory.sh/build-assets/MacOSX11.3.sdk.tar.xz \
          -O /tmp/x-macosx/root.tar.gz && \
        echo $macosx_sha512'  /tmp/x-macosx/root.tar.gz' \
          | sha512sum -c - && \
        tar -xf /tmp/x-macosx/root.tar.gz -C /tmp/x-macosx/root --strip-components=1 && \
        echo Done!

    # Set up the Windows root, if the user accepted the license.
    - if: inputs.windows-accept-license == 'true'
      id: cache-x-windows
      uses: actions/cache@v3
      with:
        key: savi-build-release-xwin-0.2.1-20220922
        path: /tmp/x-windows/root
    - if: >
        inputs.windows-accept-license == 'true'
        && steps.cache-x-windows.outputs.cache-hit != 'true'
      shell: bash
      env: { XWIN_ACCEPT_LICENSE: '1' }
      run: |
        xwin_sha256=1a242d10aec08b9ea0aa4104b106289916291ef87e3bac3b911b006faf46c288 && \
        rm -rf /tmp/x-windows && mkdir -p /tmp/x-windows/root && \
        cd /tmp/x-windows && \
        curl -L --fail https://github.com/Jake-Shadle/xwin/releases/download/0.2.1/xwin-0.2.1-x86_64-unknown-linux-musl.tar.gz \
          | tar --strip-components=1 --wildcards -xvzf - '*/xwin' && \
        echo $xwin_sha256'  xwin' | sha256sum -c - && \
        ./xwin splat --output /tmp/x-windows/root && \
        echo Done!

    # Install dependencies for the Savi application being built, but guarantee
    # that the dependency manifests aren't updated compared to the source code.
    - run: |
        savi deps update --for ${{ inputs.manifest-name }}
        git diff --exit-code
      shell: bash

    ##
    # Now, build for all requested platforms...

    - if: >
        inputs.x86_64-unknown-linux-gnu == 'true'
        || inputs.all-platforms == 'true'
      run: ${{ inputs.build-command }}
      shell: bash
      env:
        dir: ${{ steps.setup.outputs.directory }}
        manifest_name: ${{ inputs.manifest-name }}
        tarball_name: ${{ inputs.tarball-name }}
        target: x86_64-unknown-linux-gnu
        SAVI_SYS_ROOT: /tmp/x-x86_64-linux-gnu/root

    - if: >
        inputs.x86_64-unknown-linux-musl == 'true'
        || inputs.all-platforms == 'true'
      run: ${{ inputs.build-command }}
      shell: bash
      env:
        dir: ${{ steps.setup.outputs.directory }}
        manifest_name: ${{ inputs.manifest-name }}
        tarball_name: ${{ inputs.tarball-name }}
        target: x86_64-unknown-linux-musl
        SAVI_SYS_ROOT: /tmp/x-x86_64-alpine/root

    - if: >
        inputs.arm64-unknown-linux-musl == 'true'
        || inputs.all-platforms == 'true'
      run: ${{ inputs.build-command }}
      shell: bash
      env:
        dir: ${{ steps.setup.outputs.directory }}
        manifest_name: ${{ inputs.manifest-name }}
        tarball_name: ${{ inputs.tarball-name }}
        target: arm64-unknown-linux-musl
        SAVI_SYS_ROOT: /tmp/x-arm64-alpine/root

    - if: >
        inputs.x86_64-unknown-freebsd == 'true'
        || inputs.all-platforms == 'true'
      run: ${{ inputs.build-command }}
      shell: bash
      env:
        dir: ${{ steps.setup.outputs.directory }}
        manifest_name: ${{ inputs.manifest-name }}
        tarball_name: ${{ inputs.tarball-name }}
        target: x86_64-unknown-freebsd
        SAVI_SYS_ROOT: /tmp/x-x86_64-freebsd/root/usr/local/freebsd-sysroot/amd64

    - if: >
        inputs.x86_64-apple-macosx == 'true'
        || inputs.all-platforms == 'true'
      run: ${{ inputs.build-command }}
      shell: bash
      env:
        dir: ${{ steps.setup.outputs.directory }}
        manifest_name: ${{ inputs.manifest-name }}
        tarball_name: ${{ inputs.tarball-name }}
        target: x86_64-apple-macosx
        SAVI_SYS_ROOT: /tmp/x-macosx/root

    - if: >
        inputs.arm64-apple-macosx == 'true'
        || inputs.all-platforms == 'true'
      run: ${{ inputs.build-command }}
      shell: bash
      env:
        dir: ${{ steps.setup.outputs.directory }}
        manifest_name: ${{ inputs.manifest-name }}
        tarball_name: ${{ inputs.tarball-name }}
        target: arm64-apple-macosx
        SAVI_SYS_ROOT: /tmp/x-macosx/root

    - if: >
        inputs.x86_64-unknown-windows-msvc == 'true'
        || inputs.all-platforms == 'true'
      run: ${{ inputs.build-command }}
      shell: bash
      env:
        dir: ${{ steps.setup.outputs.directory }}
        manifest_name: ${{ inputs.manifest-name }}
        tarball_name: ${{ inputs.tarball-name }}
        target: x86_64-unknown-windows-msvc
        SAVI_SYS_ROOT: /tmp/x-windows/root

    - run: ls -la ${{ steps.setup.outputs.directory }}/publish
      shell: bash
